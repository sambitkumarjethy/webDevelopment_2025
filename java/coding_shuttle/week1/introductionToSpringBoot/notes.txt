Fundamentals
__________________

1.core Foundation
2. Advance Java (JDBC, JSP, Servelet)
3. Java 8 ( 8 Features)
4. OOPS
5. Spring Boot


@SpringBootApplication
________________________

1. It is the starting point of application
2. One application can have only one SpringBootApplication
3. Every thing is a Bean in spring Boot Application


1.5 Spring Boot vs Spring Framework
____________________________________________

1. Starter Dependency → The dependency on Pom.xml.
Auto Configuration → Means will put all the dependency in class and auto configuration.
Example: External Library → springframework.boot:spring-boot-autoconfigure:3.5.4


2. Externalized Configuration
Example: application.properties, Environment Variables


3. Embedded Tomcat Jetty Servers
Example: Dependency listed in Pom.xml file


4. Built-in metrics & Health Checks
Here the dependency version is managed by Spring Boot.
Example: version of MongoDB.


1.6 = Auto Configurations, Application Context and Internal working of a Spring Application.
___________________________________________________________________________

Pom.xml → Maven is a popular build automation tool used in many Java projects. In Spring Boot project, dependencies are specified in pom.xml file.
Maven then also resolves these dependencies and includes them in the classpath.


→ Starter like Spring Boot Starter
Stater (sic) usually include a ton of third-party libraries onto your project by default.
Its Auto Configuration uses these dependencies to setup and pre-config these libraries automatically.

What is Auto Configuration?
_____________________
Auto Configuration refers to the mechanism that automatically configures Spring Boot app based on dependencies present on the
 classpath and other application-specific settings.

This feature simplifies the setup and development process allowing developers to focus more on writing business logic rather than configuring the framework.